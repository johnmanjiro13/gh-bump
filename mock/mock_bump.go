// Code generated by MockGen. DO NOT EDIT.
// Source: bumper.go

// Package mock is a generated GoMock package.
package mock

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bump "github.com/johnmanjiro13/gh-bump/bump"
)

// MockGh is a mock of Gh interface.
type MockGh struct {
	ctrl     *gomock.Controller
	recorder *MockGhMockRecorder
}

// MockGhMockRecorder is the mock recorder for MockGh.
type MockGhMockRecorder struct {
	mock *MockGh
}

// NewMockGh creates a new mock instance.
func NewMockGh(ctrl *gomock.Controller) *MockGh {
	mock := &MockGh{ctrl: ctrl}
	mock.recorder = &MockGhMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGh) EXPECT() *MockGhMockRecorder {
	return m.recorder
}

// CreateRelease mocks base method.
func (m *MockGh) CreateRelease(version, repo string, isCurrent bool, option *bump.ReleaseOption) (bytes.Buffer, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", version, repo, isCurrent, option)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(bytes.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease.
func (mr *MockGhMockRecorder) CreateRelease(version, repo, isCurrent, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockGh)(nil).CreateRelease), version, repo, isCurrent, option)
}

// ListRelease mocks base method.
func (m *MockGh) ListRelease(repo string, isCurrent bool) (bytes.Buffer, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelease", repo, isCurrent)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(bytes.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRelease indicates an expected call of ListRelease.
func (mr *MockGhMockRecorder) ListRelease(repo, isCurrent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelease", reflect.TypeOf((*MockGh)(nil).ListRelease), repo, isCurrent)
}

// ViewRelease mocks base method.
func (m *MockGh) ViewRelease(repo string, isCurrent bool) (bytes.Buffer, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewRelease", repo, isCurrent)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(bytes.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ViewRelease indicates an expected call of ViewRelease.
func (mr *MockGhMockRecorder) ViewRelease(repo, isCurrent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewRelease", reflect.TypeOf((*MockGh)(nil).ViewRelease), repo, isCurrent)
}

// ViewRepository mocks base method.
func (m *MockGh) ViewRepository() (bytes.Buffer, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewRepository")
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(bytes.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ViewRepository indicates an expected call of ViewRepository.
func (mr *MockGhMockRecorder) ViewRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewRepository", reflect.TypeOf((*MockGh)(nil).ViewRepository))
}
